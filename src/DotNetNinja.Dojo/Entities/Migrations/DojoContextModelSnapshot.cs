// <auto-generated />
using DotNetNinja.Dojo.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetNinja.Dojo.Entities.Migrations
{
    [DbContext(typeof(DojoContext))]
    partial class DojoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.Annotation", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Name", "Value")
                        .HasName("PK_Annotations");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Name", "Value"));

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.DojoEntity", b =>
                {
                    b.Property<string>("Kind")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Kind", "Name");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Kind", "Name"));

                    b.ToTable("Entities", (string)null);
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.DojoLocation", b =>
                {
                    b.Property<string>("EntityKind")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("EntityKind", "EntityName")
                        .HasName("PK_Locations");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("EntityKind", "EntityName"));

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.Domain", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_Domains");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.Label", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Name", "Value")
                        .HasName("PK_Labels");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Name", "Value"));

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Name")
                        .HasName("PK_Tags");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Name"));

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EntityAnnotations", b =>
                {
                    b.Property<string>("AnnotationsName")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AnnotationsValue")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntitiesKind")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("EntitiesName")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AnnotationsName", "AnnotationsValue", "EntitiesKind", "EntitiesName");

                    b.HasIndex("EntitiesKind", "EntitiesName");

                    b.ToTable("EntityAnnotations");
                });

            modelBuilder.Entity("EntityLabels", b =>
                {
                    b.Property<string>("EntitiesKind")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("EntitiesName")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LabelsName")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LabelsValue")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("EntitiesKind", "EntitiesName", "LabelsName", "LabelsValue");

                    b.HasIndex("LabelsName", "LabelsValue");

                    b.ToTable("EntityLabels");
                });

            modelBuilder.Entity("EntityTags", b =>
                {
                    b.Property<string>("TagsName")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EntitiesKind")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("EntitiesName")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("TagsName", "EntitiesKind", "EntitiesName");

                    b.HasIndex("EntitiesKind", "EntitiesName");

                    b.ToTable("EntityTags");
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.DojoLocation", b =>
                {
                    b.HasOne("DotNetNinja.Dojo.Entities.DojoEntity", null)
                        .WithOne("Location")
                        .HasForeignKey("DotNetNinja.Dojo.Entities.DojoLocation", "EntityKind", "EntityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityAnnotations", b =>
                {
                    b.HasOne("DotNetNinja.Dojo.Entities.Annotation", null)
                        .WithMany()
                        .HasForeignKey("AnnotationsName", "AnnotationsValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetNinja.Dojo.Entities.DojoEntity", null)
                        .WithMany()
                        .HasForeignKey("EntitiesKind", "EntitiesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLabels", b =>
                {
                    b.HasOne("DotNetNinja.Dojo.Entities.DojoEntity", null)
                        .WithMany()
                        .HasForeignKey("EntitiesKind", "EntitiesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetNinja.Dojo.Entities.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsName", "LabelsValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityTags", b =>
                {
                    b.HasOne("DotNetNinja.Dojo.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetNinja.Dojo.Entities.DojoEntity", null)
                        .WithMany()
                        .HasForeignKey("EntitiesKind", "EntitiesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotNetNinja.Dojo.Entities.DojoEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
